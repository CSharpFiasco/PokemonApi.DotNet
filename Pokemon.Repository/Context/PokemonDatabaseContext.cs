// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Pokemon.Domain.Models;

namespace Pokemon.Repository.Context
{
    public partial class PokemonDatabaseContext : DbContext
    {
        public PokemonDatabaseContext()
        {
        }

        public PokemonDatabaseContext(DbContextOptions<PokemonDatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DamageClass> DamageClass { get; set; }
        public virtual DbSet<Move> Move { get; set; }
        public virtual DbSet<MoveMethod> MoveMethod { get; set; }
        public virtual DbSet<Domain.Models.Pokemon> Pokemon { get; set; }
        public virtual DbSet<PokemonMove> PokemonMove { get; set; }
        public virtual DbSet<Domain.Models.Type> Type { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Pokemon.Database;Integrated Security=true");

            modelBuilder.Entity<DamageClass>(entity =>
            {
                entity.HasIndex(e => e.Identifier, "IX_DamageClass01");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Identifier)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Move>(entity =>
            {
                entity.HasIndex(e => e.Identifier, "AK_Move01")
                    .IsUnique();

                entity.HasIndex(e => e.TypeId, "IX_Move01");

                entity.HasIndex(e => e.DamageClassId, "IX_Move02");

                entity.Property(e => e.Identifier)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.DamageClass)
                    .WithMany(p => p.Move)
                    .HasForeignKey(d => d.DamageClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DamageClass_Type");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Move)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Move_Type");
            });

            modelBuilder.Entity<MoveMethod>(entity =>
            {
                entity.HasIndex(e => e.Identifier, "AK_MoveMethod01")
                    .IsUnique();

                entity.Property(e => e.Identifier)
                    .IsRequired()
                    .HasMaxLength(23)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Domain.Models.Pokemon>(entity =>
            {
                entity.Property(e => e.Identifier)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PokemonMove>(entity =>
            {
                entity.HasKey(e => new { e.PokemonId, e.MoveId, e.MoveMethodId, e.Level });

                entity.HasIndex(e => e.PokemonId, "IX_PokemonMove01");

                entity.HasIndex(e => e.MoveId, "IX_PokemonMove02");

                entity.HasOne(d => d.Move)
                    .WithMany(p => p.PokemonMove)
                    .HasForeignKey(d => d.MoveId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PokemonMove_Move");

                entity.HasOne(d => d.MoveMethod)
                    .WithMany(p => p.PokemonMove)
                    .HasForeignKey(d => d.MoveMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PokemonMove_MoveMethod");

                entity.HasOne(d => d.Pokemon)
                    .WithMany(p => p.PokemonMove)
                    .HasForeignKey(d => d.PokemonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PokemonMove_Pokemon");
            });

            modelBuilder.Entity<Domain.Models.Type>(entity =>
            {
                entity.HasIndex(e => e.Identifier, "AK_Type01")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Identifier)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}